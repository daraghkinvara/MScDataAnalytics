SQL> CREATE TABLE EMPLOYEE (
  2  	 E_NO		 NUMBER(3) CONSTRAINT PK_EMPLOYEE PRIMARY KEY,
  3  	 NAME		 CHAR(25) NOT NULL,
  4  	 HOME_ADDRESS	 VARCHAR(30) NOT NULL,
  5  	 TELE_NO	 NUMBER(10) NOT NULL
  6  );
Table created.
SQL> CREATE TABLE MANAGER (
  2  	 M_NO		 NUMBER(3) CONSTRAINT PK_MANAGER PRIMARY KEY,
  3  	 E_NO		 NUMBER(3) NOT NULL CONSTRAINT REF_MANAGER	 REFERENCES EMPLOYEE(E_NO)
  4  );
Table created.
SQL> CREATE TABLE MENTOR (
  2  	 MENTOR_NO	 NUMBER(3) NOT NULL CONSTRAINT REF_MENTOR_1 REFERENCES MANAGER(M_NO),
  3  	 MENTEE_NO	 NUMBER(3) NOT NULL CONSTRAINT REF_MENTOR_2 REFERENCES MANAGER(M_NO)
  4  );
Table created.
SQL> CREATE TABLE SECRETARY (
  2  	 S_NO		  NUMBER (3) CONSTRAINT PK_SECRETARY PRIMARY KEY,
  3  	 E_NO		  NUMBER (3) NOT NULL CONSTRAINT REF_SECRETARY_1 REFERENCES EMPLOYEE(E_NO),
  4  	 START_DATE	  DATE NOT NULL,
  5  	 M_NO		  NUMBER (3) NOT NULL CONSTRAINT REF_SECRETARY_2 REFERENCES MANAGER(M_NO)
  6  );
Table created.
SQL> CREATE TABLE SITE (
  2  	 SITE_ID	  NUMBER(3) CONSTRAINT PK_SITE PRIMARY KEY,
  3  	 NAME		  CHAR(10) NOT NULL,
  4  	 M_NO		  NUMBER(3) NOT NULL CONSTRAINT REF_SITE REFERENCES MANAGER(M_NO)
  5  );
Table created.
SQL> CREATE TABLE UNIT (
  2  	 UNIT_ID	  NUMBER(3) CONSTRAINT PK_UNIT PRIMARY KEY,
  3  	 UNIT_NO	  NUMBER(3) NOT NULL,
  4  	 FLOOR_AREA	  VARCHAR(2000) NOT NULL,
  5  	 ZONE		  CHAR(25) NOT NULL CHECK (ZONE = 'Light Industry' OR ZONE = 'Heavy Industry' OR ZONE = 'Distribution Centre' OR ZONE = 'Hazardous Storage'),
  6  	 SITE_ID	  NUMBER NOT NULL CONSTRAINT REF_UNIT REFERENCES SITE(SITE_ID)
  7  );
Table created.
SQL> CREATE TABLE JOB (
  2  	 J_NO		 NUMBER(3) CONSTRAINT PK_JOB PRIMARY KEY,
  3  	 DESCRIPTION	 VARCHAR(20) NOT NULL,
  4  	 LOG_DATE	 DATE NOT NULL
  5  );
Table created.
SQL> CREATE TABLE JOBUNIT (
  2  	 JU_NO		 NUMBER(3) CONSTRAINT PK_JOBUNIT PRIMARY KEY,
  3  	 UNIT_ID	 NUMBER(3) NOT NULL CONSTRAINT REF_JOBUNIT_1 REFERENCES UNIT(UNIT_ID),
  4  	 J_NUMBER	 NUMBER(3) NOT NULL CONSTRAINT REF_JOBUNIT_2 REFERENCES JOB(J_NO)
  5  );
Table created.
SQL> CREATE TABLE EMERGENCY (
  2  	 EMERG_NO	NUMBER(3) CONSTRAINT PK_EMERGENCY PRIMARY KEY,
  3  	 DATE_TIME	DATE,
  4  	 J_NO		NUMBER(3) NOT NULL CONSTRAINT REF_EMERGENCY REFERENCES JOB(J_NO)
  5  );
Table created.
SQL> CREATE TABLE ROUTINE (
  2  	 ROUT_NO       NUMBER(3) CONSTRAINT PK_ROUTINE PRIMARY KEY,
  3  	 J_NO	       NUMBER(3) NOT NULL CONSTRAINT REF_ROUTINE REFERENCES JOB(J_NO)
  4  );
Table created.
SQL> insert into employee values (1, 'James Smith', '32/6 Hillside Street', '07476242505');
1 row created.
SQL> insert into employee values (2, 'Drew McCarthy', '28 Greenbank Grove', '07476233505');
1 row created.
SQL> insert into employee values (3, 'Connor Gallacher', '33 Devon Park', '07886242505');
1 row created.
SQL> insert into employee values (4, 'Sinead Malley', '42 London Road', '07976242525');
1 row created.
SQL> insert into employee values (5, 'Mary Boyle', '11 Easter Road', '07767642505');
1 row created.
SQL> insert into employee values (6, 'Hannah Winfrey', '1/2 Buchanan Street', '01116242505');
1 row created.
SQL> insert into employee values (7, 'Mark Dimon', '4 Moat Place', '07434242505');
1 row created.
SQL> insert into employee values (8, 'Trudi Lenihan', '1/8 Appin Place', '07476299505');
1 row created.
SQL> insert into employee values (9, 'Pat Simpson', '5 Heriot Row', '07476090005');
1 row created.
SQL> insert into employee values (10, 'Ruben Reid', '21 Cappamore Lane', '07876242505');
1 row created.
SQL> insert into manager values (1, 1);
1 row created.
SQL> insert into manager values (2, 2);
1 row created.
SQL> insert into manager values (3, 3);
1 row created.
SQL> insert into manager values (4, 4);
1 row created.
SQL> insert into mentor values (1, 2);
1 row created.
SQL> insert into secretary values (1, 5, '09-Jun-18', 1);
1 row created.
SQL> insert into secretary values (2, 6, '01-Jul-20', 1);
1 row created.
SQL> insert into secretary values (3, 7, '21-Aug-15', 2);
1 row created.
SQL> insert into secretary values (4, 8, '30-Jan-01', 3);
1 row created.
SQL> insert into secretary values (5, 9, '15-Mar-16', 3);
1 row created.
SQL> insert into secretary values (6, 10, '06-Apr-15', 4);
1 row created.
SQL> insert into site values(1,'Green', 1);
1 row created.
SQL> insert into site values(2,'Blue',	2);
1 row created.
SQL> insert into site values(3,'Red',	3);
1 row created.
SQL> insert into site values(4,'Yellow',4);
1 row created.
SQL> insert into unit values(1,1,500,'Light Industry',1);
1 row created.
SQL> insert into unit values(2,1,100,'Light Industry',2);
1 row created.
SQL> insert into unit values(3,1,50, 'Light Industry',3);
1 row created.
SQL> insert into unit values(4,2,750,'Heavy Industry',3);
1 row created.
SQL> insert into unit values(5,2,900,'Heavy Industry',4);
1 row created.
SQL> insert into unit values(6,3,400,'Distribution Centre',4);
1 row created.
SQL> insert into unit values(7,4,250,'Hazardous Storage',4);
1 row created.
SQL> insert into unit values(8,5,300,'Light Industry',1);
1 row created.
SQL> insert into job values(1, 'Plumbing', '09-Feb-21');
1 row created.
SQL> insert into job values(2, 'Lighting', '02-Feb-21');
1 row created.
SQL> insert into job values(3, 'Roofing', '21-Dec-20');
1 row created.
SQL> insert into job values(4, 'Plastering', '08-Oct-20');
1 row created.
SQL> insert into job values(5, 'Locks', '01-Sep-20');
1 row created.
SQL> insert into jobunit values(1, 1, 1);
1 row created.
SQL> insert into jobunit values(2, 1, 1);
1 row created.
SQL> insert into jobunit values(3, 2, 2);
1 row created.
SQL> insert into jobunit values(4, 3, 2);
1 row created.
SQL> insert into jobunit values(5, 4, 2);
1 row created.
SQL> insert into jobunit values(6, 5, 3);
1 row created.
SQL> insert into jobunit values(7, 5, 3);
1 row created.
SQL> insert into jobunit values(8, 8, 4);
1 row created.
SQL> insert into jobunit values(9, 6, 5);
1 row created.
SQL> insert into jobunit values(10, 7, 5);
1 row created.
SQL> insert into emergency values(1, to_date('09 02 21 09 21', 'DD MM YY HH24 MI'), 1);
1 row created.
SQL> insert into emergency values(2, to_date('02 02 21 21 05', 'DD MM YY HH24 MI'), 2);
1 row created.
SQL> insert into emergency values(3, to_date('21 12 20 12 20', 'DD MM YY HH24 MI'), 3);
1 row created.
SQL> insert into routine values(1, 4);
1 row created.
SQL> insert into routine values(2, 5);
1 row created.
SQL> 
SQL> /* Query 1: What is the total floor area of the units controlled by manager no. 3 for each zone? */
SQL> 
SQL> SELECT U.Zone AS "Zone Type"
  2  	    ,SUM(U.FLOOR_AREA) AS "TOTAL FLOOR AREA"
  3  FROM UNIT U
  4  	INNER JOIN SITE S ON U.SITE_ID = S.SITE_ID
  5  WHERE S.M_NO = 3
  6  GROUP BY U.ZONE;

Zone Type                 TOTAL FLOOR AREA                                      
------------------------- ----------------                                      
Light Industry                          50                                      
Heavy Industry                         750                                      

SQL> 
SQL> /* Query 2: What is the name of the most recently hired secretary */
SQL> 
SQL> SELECT E.E_NO AS "Employee No.", E.NAME, S.START_DATE
  2  FROM   EMPLOYEE E	    
  3  	    INNER JOIN SECRETARY S ON S.E_NO = E.E_NO	    
  4  WHERE  S.START_DATE IN
  5         (SELECT MAX(S.START_DATE) as "Date"
  6         FROM SECRETARY S);

Employee No. NAME            START_DAT                                          
------------ --------------- ---------                                          
           6 Hannah Winfrey  01-JUL-20                                          
                                                                                
SQL> 
SQL> /* Query 3: Find out which units have a floor area greater than the average floor area for each unit?*/
SQL> 
SQL> SELECT UNIT_NO AS "UNIT NO."
  2  	    ,ZONE
  3  	    ,FLOOR_AREA AS "FLOOR AREA"
  4  FROM UNIT U
  5  wHERE FLOOR_AREA > (
  6  	  SELECT AVG(FLOOR_AREA)
  7  	  FROM UNIT
  8  	  WHERE UNIT_NO = U.UNIT_NO);

  UNIT NO. ZONE            FLOOR AREA                                           
---------- --------------- ----------                                           
         1 Light Industry  500                                                  
                                                                                
                                                                                
         2 Heavy Industry  900                                                  
SQL> 
SQL> /* Query 4 */
SQL> 
SQL> SELECT  SEC.NAME AS SECRETARY, MAN.NAME AS MANAGER
  2  FROM SECRETARY S	    
  3         INNER JOIN MANAGER M
  4  	        ON M.M_NO = S.M_NO
  5         INNER JOIN EMPLOYEE SEC
  6  	        ON SEC.E_NO = S.E_NO
  7         INNER JOIN EMPLOYEE MAN
  8  	        ON MAN.E_NO = M.E_NO;

SECRETARY       MANAGER                                                         
--------------- ------------------                                              
Mary Boyle      James Smith                                                                                                  
Hannah Winfrey  James Smith                                                                                                
Mark Dimon      Drew McCarthy                                                                                      
Trudi Lenihan   Connor Gallacher                                                               
Pat Simpson     Connor Gallacher                                                                           
Ruben Reid      Sinead Malley                                                                                         
6 rows selected.

SQL> /* Query 5 */
SQL> 
SQL> SELECT MAN.NAME AS MANAGER_MENTOR, ,MEN.NAME AS MANAGER_MENTEE
  2  FROM   MENTOR MTR
  3         RIGHT JOIN MANAGER MGR
  4               ON MGR.M_NO = MTR.MENTOR_NO
  5         LEFT JOIN MANAGER MTE
  6   		 ON MTE.M_NO = MTR.MENTEE_NO	   
  7         LEFT JOIN EMPLOYEE MAN
  8               ON MAN.E_NO = MGR.E_NO
  9         LEFT JOIN EMPLOYEE MEN 		
 10               ON MEN.E_NO = MTE.E_NO;

MANAGER_MENTOR       MANAGER_MENTEE                                             
-------------------- --------------------                                       
James Smith          Drew McCarthy                                                                                
Drew McCarthy                                                                                                       
Connor Gallacher                                                                                                     
Sinead Malley                                                                   

SQL> spool off;

Critique (398 words):
The biggest drawback of this database solution is the use of too many tables. Where three tables were used for employees, managers and secretaries, one would have sufficed. However, the solution adhered to third normal form. The employee table housed the attribute information, and this was not repeated in the manager or secretary tables. Another example would be the job, routine and emergency tables. One table could have housed all the relevant information where three were used. The strengths of the solution are that data integrity would be maintained throughout. No null values were allowed in when the tables were created. This, however, may create issues if there was no data available such as address information for an employee. In this case, one might put in fake data to avoid an error. Clear documentation would be required to avoid these issues occurring. The functional dependencies of the database are apparent from the order of how the tables were created. Tables such as employee were created before secretary and manager as these tables were dependent on the primary key of the employee table. This was also the case for the table Jobunit which was created to address the many-to-many relationship between job and unit. As such, this table was created after these two tables as it is dependent on both of their primary keys. The database design erred on the side of creating more tables rather less. This action was taken as physical design at later stages may require changes to the existing logical design. Furthermore, the logical design is easily interpretable with clear tables names to describes the respective entities and entity relationships. A constraint was added to check if the zone value was correctly inserted and that it must be one of four possible options. This decision was made to ensure data integrity and align with the requirements laid out in the assignment guidelines. This may however create issues if incorrect spelling or different capitalisations are used when inserting values. This trade-off was viewed as necessary in order to ensure only one of the four zone types was entered into the unit table. In addition, for each attribute in the tables, the number of characters available was specified to ensure that the values did not exceed a appropriate quantity.  Overall, the database design follows a simple approach while using integrity constraints to adhere to the project guidelines. 

